<?xml version="1.0" ?>
<robot name="w3_600b" xmlns:xacro="http://www.ros.org/wiki/xacro">

  <!-- Model properties -->
  <xacro:property name="model_class" value="robots" />
  <xacro:property name="model" value="w3_600b" />
  <xacro:arg name="model_name" default="r2d2" />

  <!-- Simulation properties -->
  <xacro:arg name="gazebo_version" default="classic" />
  <xacro:property name="gazebo_version" value="$(arg gazebo_version)"/>

  <coppelia_file filename="$(find sim_models)/models/${model_class}/${model}/files/CoppeliaSim/w3_600b.ttm"/>

  <!-- Offset properties -->
  <xacro:property name="caster_support_x_offset" value="0.02"/>
  <xacro:property name="caster_support_y_offset" value="0.0685"/>
  <!-- <xacro:property name="caster_support_z_offset" value="0"/>

  <xacro:property name="caster_wheel_x_offset" value="0"/>
  <xacro:property name="caster_wheel_y_offset" value="0"/>
  <xacro:property name="caster_wheel_z_offset" value="0"/> -->

  <xacro:property name="wheel_z_offset" value="0.147197"/>
  <xacro:property name="tray_y_offset" value="0.21150"/>

  <!-- Include files -->
  <xacro:include filename="$(find sim_models)/models/${model_class}/${model}/urdf/materials.xacro" />

  <xacro:include filename="$(find sim_models)/models/${model_class}/${model}/urdf/structure/caster_wheel.xacro" />
  <xacro:include filename="$(find sim_models)/models/${model_class}/${model}/urdf/structure/tray.xacro" />
  <xacro:include filename="$(find sim_models)/models/${model_class}/${model}/urdf/structure/wheel.xacro" />

  <xacro:include filename="$(find sim_models)/models/${model_class}/${model}/urdf/sensors/camera.xacro" />
  <xacro:include filename="$(find sim_models)/models/${model_class}/${model}/urdf/sensors/imu.xacro" />
  <xacro:include filename="$(find sim_models)/models/${model_class}/${model}/urdf/sensors/lidar.xacro" />

  <!-- STRUCTURE -->

  <link name="world_link"/>

  <link name="base_link">
    <inertial>
      <origin xyz="-0.001608 0.058048 -0.000259" rpy="0 0 0"/>
      <mass value="69.363439"/>
      <inertia ixx="3.742" ixy="-0.001876" ixz="0.001144" iyx="-0.001876" iyy="9.426" iyz="0.0002847" izx="0.001144" izy="0.0002847" izz="6.169"/>
    </inertial>
    <visual>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <mesh filename="package://sim_models/models/${model_class}/${model}/meshes/base_link_v2.stl" scale="0.001 0.001 0.001"/>
      </geometry>
      <material name="blue_body"/>
    </visual>
    <collision>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <mesh filename="package://sim_models/models/${model_class}/${model}/meshes/base.stl" scale="0.001 0.001 0.001"/>
      </geometry>
    </collision>
  </link>

  <gazebo reference="base_link">
    <material value="Gazebo/SkyBlue" />
  </gazebo>

  <joint name="base_to_world" type="fixed">
    <parent link="world_link"/>
    <child link="base_link"/>
    <origin xyz="0 0 0" rpy="1.57 0 0"/>
  </joint>

  <xacro:caster_wheel name="br" x="-0.309" y="0.0131" z="0.248"/>
  <xacro:caster_wheel name="bl" x="-0.289" y="0.0131" z="-0.268"/>
  <xacro:caster_wheel name="fr" x="0.335" y="0.0131" z="0.157"/>
  <xacro:caster_wheel name="fl" x="0.335" y="0.0131" z="-0.197"/>

  <xacro:camera name="down"/>
  <xacro:camera name="up"/>

  <xacro:lidar name="front"/>
  <xacro:lidar name="back"/>

  <xacro:imu_gazebo/>

  <xacro:wheel name="left" x="0" y="0.0575" z="-0.131553"/>
  <xacro:wheel name="right" x="0" y="0.0575" z="0.131553"/>

  <xacro:tray/>

  <!-- CONTROL -->

  <ros2_control name="GazeboSystem" type="system">
    <hardware>
      <xacro:if value="${gazebo_version == 'classic'}">
        <plugin>gazebo_ros2_control/GazeboSystem</plugin>
      </xacro:if>
      <xacro:if value="${gazebo_version == 'latest'}">
        <plugin>gz_ros2_control/GazeboSimSystem</plugin>
      </xacro:if>
    </hardware>
    <joint name="left_wheel_joint">
      <command_interface name="velocity"/>
      <state_interface name="position" />
      <state_interface name="velocity" />
    </joint>
    <joint name="right_wheel_joint">
        <command_interface name="velocity"/>
        <state_interface name="velocity" />
        <state_interface name="position" />
    </joint>
    <joint name="tray_revolute_joint">
      <command_interface name="position"/>
      <state_interface name="velocity" />
      <state_interface name="position" />
    </joint>
    <joint name="tray_prismatic_joint">
      <command_interface name="position"/>
      <state_interface name="velocity" />
      <state_interface name="position" />
    </joint>
    <sensor name="imu_sensor">
      <state_interface name="orientation.x" />
      <state_interface name="orientation.y" />
      <state_interface name="orientation.z" />
      <state_interface name="orientation.w" />
      <state_interface name="angular_velocity.x" />
      <state_interface name="angular_velocity.y" />
      <state_interface name="angular_velocity.z" />
      <state_interface name="linear_acceleration.x" />
      <state_interface name="linear_acceleration.y" />
      <state_interface name="linear_acceleration.z" />
    </sensor>
  </ros2_control>
  <gazebo>
    <xacro:if value="${gazebo_version == 'classic'}">
      <xacro:property name="plugin_name" value="gazebo_ros2_control"/>
      <xacro:property name="plugin_filename" value="libgazebo_ros2_control.so"/>
    </xacro:if>
    <xacro:if value="${gazebo_version == 'latest'}">
      <xacro:property name="plugin_name" value="gz_ros2_control::GazeboSimROS2ControlPlugin"/>
      <xacro:property name="plugin_filename" value="gz_ros2_control-system"/>
    </xacro:if>
    <plugin name="${plugin_name}" filename="${plugin_filename}">
      <ros>
        <namespace>$(arg model_name)</namespace>
        <!-- <remapping>/$(arg model_name)/joint_states:=encoders/joint_states</remapping>
        <remapping>/$(arg model_name)/dynamic_joint_states:=encoders/dynamic_joint_states</remapping> -->
      </ros>
      <parameters>$(find sim_models)/models/${model_class}/${model}/config/${model}_controllers.yaml</parameters>
    </plugin>
  </gazebo>
</robot>
